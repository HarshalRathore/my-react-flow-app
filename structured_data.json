[
  {
    "description": "Object-oriented programming (OOP) is a programming paradigm that is based on the concept of \"objects\", which are instances of classes. Objects contain data, in the form of attributes, and code, in the form of methods. OOP aims to improve code organization and reusability by grouping related data and functions together. This approach makes programs easier to maintain, extend, and debug, especially as they grow larger and more complex. ",
    "start_time": "2.48",
    "topic": "What is Object-Oriented Programming?"
  },
  {
    "start_time": "84.96",
    "description": "Primitive data types are the most basic data types in programming, representing single values like numbers, characters, and booleans. Examples include int, float, char, and boolean. They serve as the building blocks for more complex data structures but are limited in their ability to represent real-world entities effectively.  ",
    "topic": "Primitive Data Types"
  },
  {
    "start_time": "216.48",
    "description": "Structures, or structs, provide a way to group together different data types under a single name. Unlike arrays, which store elements of the same type, structures can contain a mix of data types, including other structures. This ability makes them suitable for representing more complex data entities in programming. ",
    "topic": "Structures (Structs)"
  },
  {
    "description": "A class is a blueprint or template for creating objects, which are instances of that class. It defines the attributes (data) and methods (functions) that objects of that class will have. Think of a class as a general concept, while an object is a specific realization of that concept. ",
    "start_time": "327.36",
    "topic": "Classes and Objects"
  },
  {
    "description": "Encapsulation in OOP involves bundling data and the methods that operate on that data within a class, hiding the internal implementation details from the outside world. This principle promotes data protection and code maintainability by controlling access to an object\\'s internal state.  ",
    "start_time": "465.52",
    "topic": "Encapsulation: Bundling Data and Methods"
  },
  {
    "description": "Getters and Setters are methods used to access (get) and modify (set) the values of private attributes within a class. They provide controlled access to an object\\'s data, allowing for validation and ensuring data integrity.  ",
    "start_time": "500.319",
    "topic": "Getters and Setters: Controlled Data Access"
  },
  {
    "start_time": "776.32",
    "description": "Abstraction in OOP involves simplifying complex systems by modeling them in a way that focuses on essential details and hides unnecessary complexity from the user. It enhances code readability, maintainability, and reusability by providing a clear separation between what an object does and how it does it.  ",
    "topic": "Abstraction: Simplifying Complexity"
  },
  {
    "description": "Inheritance enables creating new classes (subclasses) that inherit attributes and methods from existing classes (superclasses), promoting code reuse and reducing redundancy. Subclasses can extend the functionality of superclasses, creating a hierarchy of related classes.  ",
    "start_time": "1071.28",
    "topic": "Inheritance: Extending Classes"
  },
  {
    "start_time": "1231.76",
    "description": "Access modifiers (public, private, protected) control the accessibility of classes, attributes, and methods, determining which parts of the code can access and modify them. They enforce encapsulation and data hiding principles in OOP. ",
    "topic": "Access Modifiers: Controlling Accessibility"
  },
  {
    "description": "Polymorphism in OOP allows objects of different classes to be treated as objects of a common superclass. It enables writing code that can work with objects of various types without needing to know their specific class, promoting flexibility and code reusability. ",
    "start_time": "1375.039",
    "topic": "Polymorphism: Methods in Many Forms"
  },
  {
    "start_time": "1385.12",
    "description": "Dynamic polymorphism, or method overriding, occurs when a subclass provides a specific implementation for a method that is already defined in its superclass. The actual method called is determined at runtime based on the object\\'s type.  ",
    "topic": "Dynamic Polymorphism (Method Overriding)"
  },
  {
    "description": "Static polymorphism, or method overloading, allows defining multiple methods with the same name within the same class, as long as they have different parameter lists (number or types of arguments). The compiler determines which method to call based on the arguments used in the method call. ",
    "start_time": "1564.96",
    "topic": "Static Polymorphism (Method Overloading)"
  }
]